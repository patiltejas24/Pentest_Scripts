<ruby>


### Execute FTP Version Module
service_name = "ftp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running FTP Version Module")
self.run_single("use auxiliary/scanner/ftp/ftp_version")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute FTP Anonymous Module
service_name = "ftp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running FTP Anonymous Module")
self.run_single("use auxiliary/scanner/ftp/anonymous")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute SSH Version Module
service_name = "ssh"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running SSH Version Module")
self.run_single("use auxiliary/scanner/ssh/ssh_version")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute SMTP Version Module
service_name = "smtp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running SMTP Version Module")
self.run_single("use auxiliary/scanner/smtp/smtp_version")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Execute SMTP Open Relay Module
service_name = "smtp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running SMTP Open Relay Module")
self.run_single("use auxiliary/scanner/smtp/smtp_relay")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute DNS Amplification Check
service_name = "domain"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running DNS Amplification Module")
self.run_single("use auxiliary/scanner/dns/dns_amp")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute DNS Scraper Check for every DNS IP Address
### This module uses two for loops, first check all the ports on the which DNS Server is running
### then run the module on every host
service_name = "domain"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.hosts"
out_filename_hosts2 = "/tmp/#{service_name}.hosts2"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running DNS Scraper Module")
self.run_single("use auxiliary/gather/dns_cache_scraper")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -o #{out_filename_hosts} ")
		self.run_single("cat #{out_filename_hosts} | cut -d , -f1 | sort | uniq | grep -v host > #{out_filename_hosts2} ")
		self.run_single("set RPORT #{line}")

		#Run for every host
		File.open("#{out_filename_hosts2}").each do |line2|
			self.run_single("set NS #{line2}") 
#			self.run_single("run")
		end
	end
end


### Execute Finger Module
service_name = "finger"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Running Finger Module")
self.run_single("use auxiliary/scanner/finger/finger_users")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Execute Tomcat Manager Login on http services

service_name ="http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'Apache\ Tomcat'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Apache Tomcat Manager Login on HTTP Services Module")
self.run_single("use auxiliary/scanner/http/tomcat_mgr_login")
self.run_single("services -s #{service_name} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -S #{text_search} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Execute Tomcat Manager Login on ssl/http services
service_name_msf = "ssl/http"
service_name = "ssl_http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'Apache\ Tomcat'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Apache Tomcat Manager Login on ssl/http services")

self.run_single("use auxiliary/scanner/http/tomcat_mgr_login")
self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -S #{text_search} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Execute Lotus Domino Version on HTTP
service_name = "http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'Lotus\ Domino'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Lotus Domino Version Module on HTTP")
self.run_single("use auxiliary/scanner/lotus/lotus_domino_version")
self.run_single("services -s #{service_name} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -S #{text_search} -u -R")
		self.run_single("set RPORT #{line}")
#		self.run_single("run")
	end
end


### Execute Lotus Domino Version on http/ssl
### Whenever we encounter http/ssl or ssl/http; We have to use service_name_msf
service_name_msf = "http/ssl"
service_name = "http_ssl"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'Lotus\ Domino'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Lotus Domino Version Module on HTTP/SSL")
self.run_single("use auxiliary/scanner/lotus/lotus_domino_version")
self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -S #{text_search} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Execute Lotus Domino Version on ssl/http
service_name_msf = "ssl/http"
service_name = "ssl_http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'Lotus\ Domino'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Lotus Domino Version Module on SSL/HTTP")
self.run_single("use auxiliary/scanner/lotus/lotus_domino_version")
self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -S #{text_search} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
#		self.run_single("run")
	end
end


### Execute IIS DAV Scanner on HTTP
service_name = "http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'IIS'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing IIS DAV Scanner on HTTP")
self.run_single("use auxiliary/scanner/http/webdav_scanner")
self.run_single("services -s #{service_name} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -S #{text_search} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end



### Execute IIS DAV Scanner on ssl/http
service_name_msf = "ssl/http"
service_name = "ssl_http"
text_search = 'IIS'
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing IIS DAV Scanner on SSL/HTTP")
self.run_single("use auxiliary/scanner/http/webdav_scanner")
self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -S #{text_search} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute IIS DAV Scanner on http/ssl
service_name_msf = "http/ssl"
service_name = "http_ssl"
text_search = 'IIS'
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing IIS DAV Scanner on HTTP/SSL")
self.run_single("use auxiliary/scanner/http/webdav_scanner")
self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -S #{text_search} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute VMware ESXi Version on HTTP
service_name = "http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'VMware\ ESXi'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing VMware ESXi Version on HTTP")
self.run_single("use auxiliary/scanner/vmware/esx_fingerprint")
self.run_single("services -s #{service_name} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -S #{text_search} -u -R")
		self.run_single("set RPORT #{line}")
#		self.run_single("run")
	end
end

### Execute VMware ESXi Version on HTTPS
service_name = "https"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
text_search = 'VMware\ ESXi'
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing VMware ESXi Version on HTTPS")
self.run_single("use auxiliary/scanner/vmware/esx_fingerprint")
self.run_single("services -s #{service_name} -S #{text_search} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -S #{text_search} -u -R")
		self.run_single("set RPORT #{line}")
#		self.run_single("run")
	end
end




### Execute SNMP Login for default communities
proto_name = "tcp"
service_name = "snmp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing SNMP Login for default communities")
self.run_single("use auxiliary/scanner/snmp/snmp_login")
self.run_single("services -s #{service_name} -r #{proto_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -r #{proto_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end



### Execute SNMP Enumerate using creds found ( if any )
proto_name = "tcp"
service_name = "snmp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing SNMP Enumerate using creds")
self.run_single("use auxiliary/scanner/snmp/snmp_enum")
self.run_single("creds -s #{service_name} -R -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

#if line_count > 1
#	self.run_single("cat #{in_filename} | cut -d , -f3 | cut -d \/ -f1 | sort | uniq | grep -v service > #{out_filename}")
#	File.open("#{out_filename}").each do |line|
#		self.run_single("creds -p #{line} -s #{service_name} -R")
#		self.run_single("set RPORT #{line}")
#		self.run_single("run")
#	end
#end



### Enumerate SMB Version 
service_name = "microsoft-ds"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing SMB Version")
self.run_single("use auxiliary/scanner/smb/smb_version")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Enumerate rexec login ( Port 512 ) 
service_name = "exec"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing REXEC login Module")
self.run_single("use auxiliary/scanner/rservices/rexec_login")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Execute RLOGIN ( Port 513 )
service_name_msf = "login"
service_name = "login"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing RLOGIN login Module")
self.run_single("echo running rlogin check")
self.run_single("use auxiliary/scanner/rservices/rlogin_login")
self.run_single("set BLANK_PASSWORDS true")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Enumerate RSH Login ( Port 514 ) 
service_name = "shell"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing RSH login Module")
self.run_single("use auxiliary/scanner/rservices/rsh_login")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Eumerate AFP Apple Filing Protocol
service_name = "afp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing AFP Apple Filing Protocol Module")
self.run_single("use auxiliary/scanner/afp/afp_server_info")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Enumerate SSLv3 HTTPS SSL/TLS Version Detection (POODLE scanner) for HTTPS
service_name = "https"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing SSLv3 SSL/TLS Version Detection ( Poodle Scanner ) for HTTPS")
self.run_single("use auxiliary/scanner/http/ssl_version")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end



### Enumerate SSLv3 HTTP SSL/TLS Version Detection (POODLE scanner) for ssl/http
service_name_msf = "ssl/http"
service_name = "ssl_http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing SSLv3 SSL/TLS Version Detection ( Poodle Scanner ) for SSL/HTTP")
self.run_single("use auxiliary/scanner/http/ssl_version")
self.run_single("services -s #{service_name_msf} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
#		self.run_single("run")
	end
end

### Enumerate SSLv3 HTTP SSL/TLS Version Detection (POODLE scanner) for ssl/https
service_name_msf = "ssl/https"
service_name = "ssl_https"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing SSLv3 SSL/TLS Version Detection ( Poodle Scanner ) for SSL/HTTPS")
self.run_single("use auxiliary/scanner/http/ssl_version")
self.run_single("services -s #{service_name_msf} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
#		self.run_single("run")
	end
end


### Enumerate Heartbleed Scanner for HTTPS (Heartbleed scanner) 
service_name = "https"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Heartbleed Scanner for HTTPS ( Heartbleed scanner )")
self.run_single("use auxiliary/scanner/ssl/openssl_heartbleed")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end
	
### Enumerate Heartbleed Scanner for ssl/http (Heartbleed scanner)
service_name_msf = "ssl/http"
service_name = "ssl_http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Heartbleed Scanner for SSL/HTTP")
self.run_single("use auxiliary/scanner/ssl/openssl_heartbleed")
self.run_single("services -s #{service_name_msf} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Enumerate Heartbleed Scanner for ssl/https (Heartbleed scanner)
service_name_msf = "ssl/https"
service_name = "ssl_https"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Heartbleed Scanner for SSL/HTTPS")
self.run_single("use auxiliary/scanner/ssl/openssl_heartbleed")
self.run_single("services -s #{service_name_msf} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Enumerate openssl_ccs Scanner for HTTPS (openssl_ccs scanner) 
service_name = "https"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing openssl_ccs Scanner for HTTPS")
self.run_single("use auxiliary/scanner/ssl/openssl_ccs")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end
	
### Enumerate openssl_ccs Scanner for ssl/http (openssl_ccs scanner)
service_name_msf = "ssl/http"
service_name = "ssl_http"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing openssl_ccs Scanner for SSL/HTTP")
self.run_single("use auxiliary/scanner/ssl/openssl_ccs")
self.run_single("services -s #{service_name_msf} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Enumerate openssl_ccs Scanner for ssl/https (openssl_ccs scanner)
service_name_msf = "ssl/https"
service_name = "ssl_https"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing openssl_ccs Scanner for SSL/HTTPS")
self.run_single("use auxiliary/scanner/ssl/openssl_ccs")
self.run_single("services -s #{service_name_msf} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Enumerate RSync scanner for Rsync
service_name_msf = "rsync"
service_name = "rsync"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing RSYNC")
self.run_single("use auxiliary/scanner/rsync/modules_list")
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end

end

### Enumerate Java RMI -- java-rmi
service_name_msf = "java-rmi"
service_name = "java-rmi"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing JAVA-RMI Auxiliary Scanner on java-rmi")
self.run_single("use auxiliary/scanner/misc/java_rmi_server")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end

end

### Enumerate Java RMI -- rmiregistry
service_name_msf = "rmiregistry"
service_name = "rmiregistry"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing JAVA-RMI on rmiregistry Auxiliary Scanner")
self.run_single("use auxiliary/scanner/misc/java_rmi_server")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end

end


### Enumerate Oracle TNS-LSNR Version
service_name_msf = "oracle-tns"
service_name = "oracle-tns"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Oracle TNS-LSNR Version Module")
self.run_single("use auxiliary/scanner/oracle/tnslsnr_version")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end


### Enumerate TNS Poison
service_name_msf = "ssl/http"
service_name = "oracle-tns"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing TNS Poison Version Module")
self.run_single("use auxiliary/scanner/oracle/tnspoison_checker")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end

end


### Enumerate MySQL Versions
service_name_msf = "mysql"
service_name = "mysql"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing MySQL Version Module")
self.run_single("use auxiliary/scanner/mysql/mysql_version")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end

### Enumerate PostgreSQL Version
service_name_msf = "postgresql"
service_name = "postgresql"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing PostgreSQL Version Module")
self.run_single("use auxiliary/scanner/postgres/postgres_version")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end 

### Enumerate Open X11
service_name_msf = "ssl/http"
service_name = "x11"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing Open X11 Module")
self.run_single("use auxiliary/scanner/x11/open_x11")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end 

### Enumerate PJL jetdirect ( Port 9100 )
service_name_msf = "jetdirect"
service_name = "jetdirect"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
puts in_filename
puts out_filename
self.run_single("unset RHOSTS")
self.run_single("echo Executing PJL Version Module")
self.run_single("use auxiliary/scanner/printer/printer_version_info")  
self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -R")
		self.run_single("set RPORT #{line}")
		self.run_single("run")
	end
end  


</ruby>








