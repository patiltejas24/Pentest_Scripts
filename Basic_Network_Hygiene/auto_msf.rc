##############################################################################################################################################################################################
#auto-msf is created to automate the execution of different auxiliary or other modules found in msf based on the port scan done.
#
#Currently, this resource script executes the modules listed in README.me for services running on any port.    
#
#Copyright (C) 2016 Vijay Kumar ( bitvijays )
#
#This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 
#of the License, or (at your option) #any later version.
#
#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
#GNU General Public License for #more details.
#
#You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.
#
#
################################################################################################################################################################################################
<ruby>
address = "/root/Documents/EY_Projects/CLP_India/Internal/MSF/msf_log"

### Execute FTP Version Module
module_name = "FTP Version Module"
service_name = "ftp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/ftp_version.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else 
	self.run_single("spool #{log_file}")
	self.run_single("echo [+] Module Started\n")
	self.run_single("unset RHOSTS")
	self.run_single("echo Running #{module_name}")
	self.run_single("use auxiliary/scanner/ftp/ftp_version")
	self.run_single("services -s #{service_name} -o #{in_filename}")

	##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("echo [+] Module Completed\n")
	self.run_single("spool off #{log_file}")
end

### Execute FTP Anonymous Module
module_name = "FTP Anonymous Module"
service_name = "ftp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
log_file = "#{address}/ftp_anonymous.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
       self.run_single("spool #{log_file}")
       self.run_single("unset RHOSTS")
       self.run_single("echo #{module_name}")
       self.run_single("use auxiliary/scanner/ftp/anonymous")
       self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

       if line_count > 1
       self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("spool off #{log_file}")
end

### Execute SSH Version Module
module_name = "SSH Version Module"
service_name = "ssh"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/ssh_version.log"

#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo #{module_name}")
	self.run_single("use auxiliary/scanner/ssh/ssh_version")
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("spool off #{log_file}")
end


### Execute SMTP Version Module
module_name = "SMTP Version Module"
service_name = "smtp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
log_file = "#{address}/smtp_version.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo #{module_name}")
	self.run_single("use auxiliary/scanner/smtp/smtp_version")
	self.run_single("services -s #{service_name} -o #{in_filename}")

	##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("spool off #{log_file}")
end

### Execute SMTP Open Relay Module
module_name = "SMTP Open Relay Module"
service_name = "smtp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/smtp_relay.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo #{module_name}")
	self.run_single("use auxiliary/scanner/smtp/smtp_relay")
	self.run_single("services -s #{service_name} -o #{in_filename}")
	##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | 	uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("spool off #{log_file}")
end

### Execute DNS Amplification Check
module_name = "DNS Amplification Check"
service_name = "domain"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/dns_amp.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
       self.run_single("spool #{log_file}")
       self.run_single("unset RHOSTS")
       self.run_single("echo #{module_name}")
       self.run_single("use auxiliary/scanner/dns/dns_amp")
       self.run_single("services -s #{service_name} -o #{in_filename}")
       ##Checking if any host is running domain service

       line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

       if line_count > 1
       self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
              self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
       end
       self.run_single("spool off #{log_file}")
end


### Execute DNS Scraper Check for every DNS IP address
### This module uses two for loops, first check all the ports on the which DNS Server is running
### then run the module on every host
module_name = "DNS Cache Scraper Check"
service_name = "domain"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.hosts"
out_filename_hosts2 = "/tmp/#{service_name}.hosts2"
log_file = "#{address}/dns_cache_scraper.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
       self.run_single("spool #{log_file}")
       self.run_single("unset RHOSTS")
       self.run_single("echo #{module_name}")
       self.run_single("use auxiliary/gather/dns_cache_scraper")
       self.run_single("services -s #{service_name} -o #{in_filename}")
       ##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -o #{out_filename_hosts} ")
		self.run_single("cat #{out_filename_hosts} | cut -d , -f1 | sort | uniq | grep -v host > #{out_filename_hosts2} ")
		self.run_single("set RPORT #{line}")

		#Run for every host
		File.open("#{out_filename_hosts2}").each do |line2|
			self.run_single("set NS #{line2}") 
			self.run_single("run")
		end
	end
end

	self.run_single("spool off #{log_file}")
end


### Execute Finger Module
module_name = "Finger Module"
service_name = "finger"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.hosts"
log_file = "#{address}/finger_users.log"
#puts in_filename
#puts out_filename
#puts log_file


if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
       self.run_single("spool #{log_file}")
       self.run_single("unset RHOSTS")
       self.run_single("echo Running #{module_name}")
       self.run_single("use auxiliary/scanner/finger/finger_users")
       self.run_single("services -s #{service_name} -o #{in_filename}")
       ##Checking if any host is running domain service

       line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

       if line_count > 1
       self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
              self.run_single("services -p #{line} -s #{service_name} 		-u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
       end
self.run_single("spool off #{log_file}")
end


### Execute Tomcat Manager Login on ssl/http services
services_msf = Array["http", "ssl/http", "http/ssl"]

module_name = "Apache Tomcat Manager Login"

service_name = "http_tomcat"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/tomcat_mgr_login.log"
text_search = 'Apache\ Tomcat'
#puts in_filename
#puts out_filename
#puts log_file
i = ""

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	service_name_msf = i
	self.run_single("spool #{log_file}")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/http/tomcat_mgr_login")

	for i in services_msf
	        service_name_msf = i
		self.run_single("unset RHOSTS")
		self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
	
##Checking if any host is running domain service

		line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	
		if line_count > 1
			self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
			File.open("#{out_filename}").each do |line|
				self.run_single("services -p #{line} -S #{text_search} -s #{service_name_msf} -u -R")
				self.run_single("set RPORT #{line}")
				self.run_single("run")
			end
		end
	end

	self.run_single("spool off #{log_file}")
end


### Execute Lotus Domino Version 

services_msf = Array["http", "ssl/http", "http/ssl"]

module_name = "Lotus Domino Version"

service_name = "http_lotus"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/lotus_domino_version.log"
text_search = 'Lotus\ Domino'
#puts in_filename
#puts out_filename
#puts log_file
i = ""

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	service_name_msf = i
	self.run_single("spool #{log_file}")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/lotus/lotus_domino_version")

	for i in services_msf
	        service_name_msf = i
		self.run_single("unset RHOSTS")
		self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
	
##Checking if any host is running domain service

		line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	
		if line_count > 1
			self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
			File.open("#{out_filename}").each do |line|
				self.run_single("services -p #{line} -S #{text_search} -s #{service_name_msf} -u -R")
				self.run_single("set RPORT #{line}")
				self.run_single("run")
			end
		end
	end

	self.run_single("spool off #{log_file}")
end


### Execute IIS DAV Scanner on http, http/ssl and ssl/http

services_msf = Array["http", "ssl/http", "http/ssl"]

module_name = "IIS DAV Scanner"

service_name = "http_iis"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/webdav_scanner.log"
text_search = 'IIS'
#puts in_filename
#puts out_filename
#puts log_file
i = ""

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	service_name_msf = i
	self.run_single("spool #{log_file}")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/http/webdav_scanner")

	for i in services_msf
	        service_name_msf = i
		self.run_single("unset RHOSTS")
		self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
	
##Checking if any host is running domain service

		line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	
		if line_count > 1
			self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
			File.open("#{out_filename}").each do |line|
				self.run_single("services -p #{line} -S #{text_search} -s #{service_name_msf} -u -R")
				self.run_single("set RPORT #{line}")
				self.run_single("run")
			end
		end
	end

	self.run_single("spool off #{log_file}")
end


### Execute VMware ESXi Version on HTTPS

services_msf = Array["http", "ssl/http", "http/ssl"]

module_name = "VMware ESXi Version"

service_name = "http_vmware"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/esx_fingerprint.log"
text_search = 'VMware\ ESXi'
#puts in_filename
#puts out_filename
#puts log_file
i = ""

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	service_name_msf = i
	self.run_single("spool #{log_file}")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/vmware/esx_fingerprint")

	for i in services_msf
	        service_name_msf = i
		self.run_single("unset RHOSTS")
		self.run_single("services -s #{service_name_msf} -S #{text_search} -o #{in_filename}")
	
##Checking if any host is running domain service

		line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	
		if line_count > 1
			self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
			File.open("#{out_filename}").each do |line|
				self.run_single("services -p #{line} -S #{text_search} -s #{service_name_msf} -u -R")
				self.run_single("set RPORT #{line}")
				self.run_single("run")
			end
		end
	end

	self.run_single("spool off #{log_file}")
end

### Enumerate SMB Version 
module_name = "SMB Version"
service_name = "microsoft-ds"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
#puts in_filename
log_file = "#{address}/smb_version.log"
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/smb/smb_version")
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | 	uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
#			self.run_single("run")
		end
	end
self.run_single("spool off #{log_file}")

end


### Enumerate rexec login ( Port 512 )
module_name = "rexec login scanner"
service_name = "exec"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/rexec_login.log"
#puts in_filename
#puts out_filename
#puts log_file


if ( File.exist?"#{log_file}" )
	puts "#{service_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/rservices/rexec_login")
	self.run_single("set BLANK_PASSWORDS true")
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | 	uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
self.run_single("spool off #{log_file}")
end


### Execute RLOGIN ( Port 513 )
module_name = "Rlogin Scanner"
service_name_msf = "login"
service_name = "login"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/rlogin_login.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")	
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/rservices/rlogin_login")
	self.run_single("set BLANK_PASSWORDS true")
	self.run_single("services -s #{service_name} -o #{in_filename}")
	##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("spool off #{log_file}")
end

### Enumerate RSH Login ( Port 514 ) 
module_name = "RSH Login"
service_name = "shell"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/rsh_login.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/rservices/rsh_login")
	self.run_single("services -s #{service_name} -o #{in_filename}")
	self.run_single("set BLANK_PASSWORDS true")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
self.run_single("spool off #{log_file}")
end


### Eumerate AFP Apple Filing Protocol
module_name = "AFP Apple Filing Protocol"
service_name = "afp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/afp_server_info.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/afp/afp_server_info")
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
self.run_single("spool off #{log_file}")
end


### Enumerate SSLv3 HTTPS SSL/TLS Version Detection (POODLE scanner) for HTTPS, ssl/http, ssl/https
services_msf = Array["https", "ssl/http", "http/ssl", "ssl/https"]

module_name = "SSLv3 HTTP SSL/TLS Version Detection - POODLE scanner"

service_name = "http_sslv3"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/ssl_version.log"
#puts in_filename
#puts out_filename
#puts log_file
i = ""

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	service_name_msf = i
	self.run_single("spool #{log_file}")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/http/ssl_version")

	for i in services_msf
	        service_name_msf = i
		self.run_single("unset RHOSTS")
		self.run_single("unset RPORT")
		self.run_single("services -s #{service_name_msf} -o #{in_filename}")
	
##Checking if any host is running domain service

		line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	
		if line_count > 1
			self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
			File.open("#{out_filename}").each do |line|
				self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
				self.run_single("set RPORT #{line}")
				self.run_single("run")
			end
		end
	end

	self.run_single("spool off #{log_file}")
end


### Enumerate Heartbleed Scanner for HTTPS -- Heartbleed scanner
services_msf = Array["https", "ssl/http", "http/ssl", "ssl/https"]

module_name = "Heartbleed Scanner"

service_name = "http_sslv3"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/openssl_heartbleed.log"
#puts in_filename
#puts out_filename
#puts log_file
i = ""

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	service_name_msf = i
	self.run_single("spool #{log_file}")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/ssl/openssl_heartbleed")

	for i in services_msf
	        service_name_msf = i
		self.run_single("unset RHOSTS")
		self.run_single("unset RPORT")
		self.run_single("services -s #{service_name_msf} -o #{in_filename}")
	
##Checking if any host is running domain service

		line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	
		if line_count > 1
			self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
			File.open("#{out_filename}").each do |line|
				self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
				self.run_single("set RPORT #{line}")
				self.run_single("run")
			end
		end
	end

	self.run_single("spool off #{log_file}")
end


### Enumerate openssl_ccs Scanner for HTTPS (openssl_ccs scanner) 
services_msf = Array["https", "ssl/http", "http/ssl", "ssl/https"]

module_name = "openssl_ccs Scanner"

service_name = "http_sslv3"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/openssl_ccs.log"
#puts in_filename
#puts out_filename
#puts log_file
i = ""

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else

	service_name_msf = i
	self.run_single("spool #{log_file}")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/ssl/openssl_ccs")

	for i in services_msf
	        service_name_msf = i
		self.run_single("unset RHOSTS")
		self.run_single("unset RPORT")
		self.run_single("services -s #{service_name_msf} -o #{in_filename}")
	
##Checking if any host is running domain service

		line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i
	
		if line_count > 1
			self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
			File.open("#{out_filename}").each do |line|
				self.run_single("services -p #{line} -s #{service_name_msf} -u -R")
				self.run_single("set RPORT #{line}")
				self.run_single("run")
			end
		end
	end

	self.run_single("spool off #{log_file}")
end


### Enumerate RSync scanner for Rsync
module_name = "RSync Scanner"
service_name_msf = "rsync"
service_name = "rsync"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/rsync_modules_list.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/rsync/modules_list")
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end

	end
	self.run_single("spool off #{log_file}")
end


### Enumerate Java RMI -- java-rmi
module_name = "Java RMI Auxiliary Scanner"
service_name_msf = "java-rmi"
service_name = "java-rmi"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/java_rmi_server.log"
#puts in_filename
#puts out_filename
#puts log_file
if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/misc/java_rmi_server")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end

	end
	self.run_single("spool off #{log_file}")
end


### Enumerate Java RMI -- rmiregistry
module_name = "JAVA-RMI on rmiregistry Auxiliary Scanner"
service_name_msf = "rmiregistry"
service_name = "rmiregistry"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/java_rmiregistry.log"
#puts in_filename
#puts out_filename
#puts log_file
if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/misc/java_rmi_server")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end

	end
self.run_single("spool off #{log_file}")
end



### Execute Java RMI Registry Interfaces Enumeration
### This module uses two for loops, first check all the ports on the which java rmiregistry Server is running
### then run the module on every host
module_name = "Java RMI Registry Interfaces Enumeration"
service_name = "rmiregistry"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.hosts"
out_filename_hosts2 = "/tmp/#{service_name}.hosts2"
log_file = "#{address}/java_rmi_registry.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
       self.run_single("spool #{log_file}")
       self.run_single("unset RHOSTS")
       self.run_single("echo #{module_name}")
       self.run_single("use auxiliary/gather/java_rmi_registry")
       self.run_single("services -s #{service_name} -o #{in_filename}")
       ##Checking if any host is running domain service

line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

if line_count > 1
	self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
	File.open("#{out_filename}").each do |line|
		self.run_single("services -p #{line} -s #{service_name} -u -o #{out_filename_hosts} ")
		self.run_single("cat #{out_filename_hosts} | cut -d , -f1 | sort | uniq | grep -v host > #{out_filename_hosts2} ")
		self.run_single("set RPORT #{line}")

		#Run for every host
		File.open("#{out_filename_hosts2}").each do |line2|
			self.run_single("set RHOST #{line2}") 
			self.run_single("run")
		end
	end
end

	self.run_single("spool off #{log_file}")
end


### Enumerate Oracle TNS-LSNR Version
module_name = "Oracle TNS-LSNR Version"
service_name_msf = "oracle-tns"
service_name = "oracle-tns"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/tnslsnr_version.log"
#puts in_filename
#puts out_filename
#puts log_file


if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/oracle/tnslsnr_version")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("spool off #{log_file}")
end


### Enumerate TNS Poison
module_name = "Oracle TNS Listener Checker"
service_name = "oracle-tns"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/tnspoison_checker.log"
#puts in_filename
#puts out_filename
#puts log_file
if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/oracle/tnspoison_checker")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
self.run_single("spool off #{log_file}")
end


##Add Oracle SID Enumeration ? ? + Oracle Default Password Module Execute?

### Enumerate Oracle TNS Listener SID Bruteforce
module_name = "Oracle TNS Listener SID Bruteforce"
service_name = "oracle"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/sid_brute.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/oracle/sid_brute")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end
	self.run_single("spool off #{log_file}")
end


### Enumerate MySQL Versions
module_name = "MySQL Server Version Enumeration"
service_name_msf = "mysql"
service_name = "mysql"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/mysql_version.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/mysql/mysql_version")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end	
	end	
self.run_single("spool off #{log_file}")
end

### Enumerate PostgreSQL Version
module_name = "PostgreSQL Version Probe"
service_name = "postgresql"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/postgres_version.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/postgres/postgres_version")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end 
self.run_single("spool off #{log_file}")
end

### Enumerate Open X11
module_name = "X11 No-Auth Scanner"
service_name = "x11"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/open_x11.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/x11/open_x11")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end 
self.run_single("spool off #{log_file}")
end


### Enumerate PJL jetdirect ( Port 9100 )
module_name = "Printer Version Information Scanner"
service_name = "jetdirect"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/printer_version_info.log"
#puts in_filename
#puts out_filename
#puts log_file


if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/printer/printer_version_info")  
	self.run_single("services -s #{service_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end  
self.run_single("spool off #{log_file}")
end


### Execute SNMP Login for default communities
module_name = "SNMP Community Login Scanner"
proto_name = "tcp"
service_name = "snmp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/snmp_login.log"

#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/snmp/snmp_login")
	self.run_single("services -s #{service_name} -r #{proto_name} -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	if line_count > 1
		self.run_single("cat #{in_filename} | cut -d , -f2 | sort | 	uniq | grep -v port > #{out_filename}")
		File.open("#{out_filename}").each do |line|
			self.run_single("services -p #{line} -s #{service_name} -r #{proto_name} -u -R")
			self.run_single("set RPORT #{line}")
			self.run_single("run")
		end
	end

### Just in the case of SNMP, following the assumption that hosts which are running ftp, telnet, ssh. There's a greater possibility of running snmp.

### Checking on port 21
	self.run_single("services -p 21 -R")
	self.run_single("run")

### Checking on port 22
	self.run_single("services -p 22 -R")
	self.run_single("run")

### Checking on port 23
	self.run_single("services -p 23 -R")
	self.run_single("run")

self.run_single("spool off #{log_file}")
end


### Not functioning as of now!
### Execute SNMP Enumerate using creds found ( if any ) 
module_name = "SNMP Enumeration Module"
proto_name = "tcp"
service_name = "snmp"
in_filename = "/tmp/#{service_name}"
out_filename = "/tmp/#{service_name}.ports"
out_filename_hosts = "/tmp/#{service_name}.ports"
log_file = "#{address}/#{service_name}.log"
#puts in_filename
#puts out_filename
#puts log_file

if ( File.exist?"#{log_file}" )
	puts "#{module_name} has already been executed."
else
	self.run_single("spool #{log_file}")
	self.run_single("unset RHOSTS")
	self.run_single("echo Executing #{module_name}")
	self.run_single("use auxiliary/scanner/snmp/snmp_enum")
	self.run_single("creds -s #{service_name} -R -o #{in_filename}")
##Checking if any host is running domain service

	line_count = `wc -l "#{in_filename}"`.strip.split(' ')[0].to_i

	#if line_count > 1
#		self.run_single("cat #{in_filename} | cut -d , -f3 | cut -d 	\/ -f1 | sort | uniq | grep -v service > #{out_filename}")
#		File.open("#{out_filename}").each do |line|
#			self.run_single("creds -p #{line} -s #{service_name} -R")
#			self.run_single("set RPORT #{line}")
#			self.run_single("run")
#		end
	#end
self.run_single("spool off #{address}/snmp_enum.log")
end

### Considation of results in to one msf.log
	self.run_single("rm #{address}/msf.log ")
	self.run_single("cat #{address}/ftp_version.log   		>> #{address}/msf.log ")
	self.run_single("cat #{address}/ftp_anonymous.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/ssh_version.log   		>> #{address}/msf.log ")
	self.run_single("cat #{address}/smtp_version.log  		>> #{address}/msf.log ")
	self.run_single("cat #{address}/smtp_relay.log    		>> #{address}/msf.log ")
	self.run_single("cat #{address}/dns_amp.log       		>> #{address}/msf.log ")
	self.run_single("cat #{address}/dns_cache_scraper.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/finger_users.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/tomcat_mgr_login.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/lotus_domino_version.log 	>> #{address}/msf.log ")
	self.run_single("cat #{address}/webdav_scanner.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/esx_fingerprint.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/smb_version.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/rexec_login.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/rlogin_login.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/rsh_login.log 			>> #{address}/msf.log ")
	self.run_single("cat #{address}/afp_server_info.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/ssl_version.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/openssl_heartbleed.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/openssl_ccs.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/rsync_modules_list.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/java_rmi_server.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/java_rmiregistry.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/java_rmi_registry.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/tnslsnr_version.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/tnspoison_checker.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/sid_brute.log 			>> #{address}/msf.log ")
	self.run_single("cat #{address}/mysql_version.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/postgres_version.log 		>> #{address}/msf.log ")
	self.run_single("cat #{address}/open_x11.log 			>> #{address}/msf.log ")
	self.run_single("cat #{address}/printer_version_info.log 	>> #{address}/msf.log ")

###Things to check
puts "1. Check SMTP open relay manually"
puts "2. Heartbleed servers"
puts "3. Java RMI Servers Results"
puts "4. Open X11"
puts "5. Oracle SID Brute/ Default User/ Password List"
puts "6. Check ISCSI"
puts "7. Check Cameras: RTSP"
</ruby>

