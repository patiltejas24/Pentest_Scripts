##############################################################################################################################################################################################
#iscsiadm login/ logout is a bash script to automate iscsiadm login /logout.								
#
#Copyright (C) 2016 Vijay Kumar ( bitvijays )
#
#This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 
#of the License, or (at your option) #any later version.
#
#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
#GNU General Public License for #more details.
#
#You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.
#
#
################################################################################################################################################################################################

function show_help {
	echo "usage: $1 [-f filename --login/ --logout]"
	echo " "
	echo "-f filename     : Filename which contains the IP Address or the Subnets to be scanned"
	echo "--login         : Login the iscsi portals ]"
	echo "--logout        : Logouts the iscsi portals]"
}
domain=""

##################################################New Code#############################################
#!/bin/sh
# POSIX

# Reset all variables that might be set
file=
login=
logout=

while :; do
#for i in $@; do
    echo $1
    case $1 in
        -h|-\?|--help)   # Call a "show_help" function to display a synopsis, then exit.
            show_help
            exit
            ;;
        -f|--file)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                file=$2
		echo $file
                shift
		shift
            else
                printf 'ERROR: "--file" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --file=?*)
            file=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --file=)         # Handle the case of an empty --file=
            printf 'ERROR: "--file" requires a non-empty option argument.\n' >&2
            exit 1
            ;;
	--login)
	    echo login
	    login="TRUE"
	    shift
            ;;
	--logout)
	    echo logout
	    logout="TRUE"
	    shift
            ;;
        -v|--verbose)
            verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            printf "\n"
	    show_help
            exit
            ;;

        *)               # Default case: If no more options then break out of the loop.
            break
    esac

#    shift
done


# if --file was provided, open it for writing, else duplicate stdout
if [ -n "$file" ]; then
	
	if [ ! -f "$file" ]; then
		echo "File not found. Please provide a valid file containing subnets or IP Addresses"
		exit
	fi 
	

	for i in $(cat "$file")
	do
		echo $i
			
		if [ -n "$login" ]; then

			a=`iscsiadm -m discovery -t sendtargets -p $i | cut -d ' ' -f2 `
			echo $a

			b=`iscsiadm -m node --targetname="$a" -l -p $i `
			echo $b 
		fi 

		if [ -n "$logout" ]; then

			a=`iscsiadm -m discovery -t sendtargets -p $i | cut -d ' ' -f2 `
			echo $a

			b=`iscsiadm -m node --targetname="$a" -u -p $i `
			echo $b 
		fi 
			
	done;

else
	show_help	    
fi


