##############################################################################################################################################################################################
#Automate_Enum is a bash script to automate Internal/ External Vulnerability Assessment and Penetration Testing. It automatically creates the folder structure and run DNS/ Port Scan /      
# Nikto, whatweb, Eyewitness for Web/ VNC/ RDP, dirb, ZAP.																			
#
#Copyright (C) 2016 Vijay Kumar ( bitvijays )
#
#This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 
#of the License, or (at your option) #any later version.
#
#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
#GNU General Public License for #more details.
#
#You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.
#
#
################################################################################################################################################################################################

function show_help {
	echo "usage: $0 [-f filename -eA/-eW/-eV/-eR/ --tellmeweb --zapmeweb --niktomeweb --dirbmeweb]"
	echo " "
	echo "-f filename     : Filename which contains the IP Address or the Subnets to be scanned"
	echo "-eA/-eW/-eV/-eR : Run EyeWitness on All(Web,RDP,VNC) or / on Web Only / on VNC Only / on RDP Only Respectively"
	echo "--nbt           : Execute nbtscan on the IPaddress or range provided."
	echo "--tellmeweb     : Execute whatweb on the http/https ports found."
	echo "--niktomeweb    : Execute nikto   on the http/https ports found. [ Caution: Intrusive ]"
	echo "--dirbmeweb     : Execute dirb    on the http/https ports found. [ Caution: Intrusive ]"
	echo "--zapmeweb      : Execute ZAP     on the http/https ports found. [ Caution: Intrusive ]"
}
domain=""

##################################################New Code#############################################
#!/bin/sh
# POSIX

# Reset all variables that might be set
file=
verbose=0 # Variables to be evaluated as shell arithmetic should be initialized to a default or validated beforehand.
eyeAll=
eyeWeb=
eyeVNC=
eyeRDP=
tellmeweb=
niktomeweb=
dirbmeweb=
zapmeweb=
nbt=

while :; do
#for i in $@; do
    echo $1
    case $1 in
        -h|-\?|--help)   # Call a "show_help" function to display a synopsis, then exit.
            show_help
            exit
            ;;
        -f|--file)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                file=$2
		echo $file
                shift
		shift
            else
                printf 'ERROR: "--file" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --file=?*)
            file=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --file=)         # Handle the case of an empty --file=
            printf 'ERROR: "--file" requires a non-empty option argument.\n' >&2
            exit 1
            ;;
	-eA)
	    eyeAll="TRUE"
	    eyeWeb="TRUE"
	    eyeVNC="TRUE"
	    eyeRDP="TRUE"
	    shift
            ;;
	-eW)
	    eyeWeb="TRUE"
	    shift
            ;;
	-eV)
	    eyeVNC="TRUE"
	    shift
            ;;
	-eR)
	    eyeRDP="TRUE"
	    shift
            ;;
	--nbt)
	    echo nbt
	    nbt="TRUE"
	    shift
            ;;

	--tellmeweb)
	    echo tellmeweb
	    tellmeweb="TRUE"
	    shift
            ;;
	--niktomeweb)
	    echo niktomeweb
	    niktomeweb="TRUE"
	    shift
            ;;
	--dirbmeweb)
	    dirbmeweb="TRUE"
	    shift
            ;;
	--zapmeweb)
	    zapmeweb="TRUE"
	    shift
            ;;
        -v|--verbose)
            verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            printf "\n"
	    show_help
            exit
            ;;

        *)               # Default case: If no more options then break out of the loop.
            break
    esac

#    shift
done


# if --file was provided, open it for writing, else duplicate stdout
if [ -n "$file" ]; then
	
	if [ ! -f "$file" ]; then
		echo "File not found. Please provide a valid file containing subnets or IP Addresses"
		exit
	fi 
	

	for i in $(cat "$file")
	do
		echo $i

#If the file contains subnets in the format 192.168.0.0/24 or others create folders like Site_192.168.0.0_24
		if [[ $i == */* ]]
		then
			var=$(echo "$i" | sed 's/\//\_/gi')
			mkdir Site_$var
			mkdir Site_$var/nmap_scans
			mkdir Site_$var/nmap_scans/DNS_Scan
			mkdir Site_$var/nmap_scans/Port_Scan
			cd Site_$var/nmap_scans
		else
			echo "Hello"
			var=$( echo "$i" | cut -d  _ -f2)
		fi

		yearmm=$(date +%Y-%m)

##Run DNS Enumeration on the provided subnet
		if [ -f ./DNS_Scan/DNS_$var-$yearmm.gnmap ]; then
			echo "DNS Enumeration Scan already completed skipping it"
		else
			echo "No DNS Enumeration found running scan"
			nmap -sL $i -oA ./DNS_Scan/DNS_$var-$yearmm -v
		fi

#Extracting the .com/.local information from the DNS Scan
		if [ -f ./DNS_Scan/DNS_$var-$yearmm.nmap ]; then
			cat ./DNS_Scan/DNS_$var-$yearmm.nmap | grep \( |grep \( | cut -d " " -f5- | grep -v "(0 hosts up)" | tr -d \( | tr -d \) | awk '{print "\"" $1 "\",\"" $2"\""}' > DNS_List.csv
		else
			echo "No DNS Enumeration found"	
		fi

##Run TOP 100 Ports on the provided range; Ports are customizable and Nmap options are customizable
		if [ -f ./Port_Scan/nmap_top25_$var-$yearmm.gnmap ]; then
			echo "Scan already completed skipping Nmap Port Scan"
		else
			echo "Port Scan not found running scan"
			nmap -n $i --top-ports 100 -sT -oA ./Port_Scan/nmap_top25_$var-$yearmm -sV --version-intensity 0 -v -PE --open
		fi

		if [ -f ./Port_Scan/nmap_top25_$var-$yearmm.gnmap ]; then

			if [ -n "$eyeWeb" ]; then

				#Check for Eyewitness Executions
				if [ -d ./Eyewitness_Screenshots/web ]; then
					echo "Eyewitness Screenshot folder found skipping running Eyewitness"
				else
					echo "Port Scan not found running scan"
					mkdir -p ./Eyewitness_Screenshots
					python /opt/EyeWitness/EyeWitness.py -x ./Port_Scan/nmap_top25_$var-$yearmm.xml --no-dns -d ./Eyewitness_Screenshots/web --timeout 15 --headless --results 50 --no-prompt
				fi

			fi 

			if [ -n "$eyeVNC" ]; then

				#Check for Eyewitness Executions of VNC
				if [ -d ./Eyewitness_Screenshots/vnc ]; then
					echo "Eyewitness Screenshot folder found skipping running Eyewitness"
				else
					echo "Port Scan not found running scan"
					mkdir -p ./Eyewitness_Screenshots
					python /opt/EyeWitness/EyeWitness.py -x ./Port_Scan/nmap_top25_$var-$yearmm.xml --no-dns -d ./Eyewitness_Screenshots/vnc --vnc --timeout 15 --results 50 --no-prompt
				fi
			fi 

			if [ -n "$eyeRDP" ]; then

				#Check for Eyewitness Executions of RDP
				if [ -d ./Eyewitness_Screenshots/rdp ]; then
					echo "Eyewitness Screenshot folder found skipping running Eyewitness"
				else
					echo "Port Scan not found running scan"
					mkdir -p ./Eyewitness_Screenshots
					python /opt/EyeWitness/EyeWitness.py -x ./Port_Scan/nmap_top25_$var-$yearmm.xml --no-dns -d ./Eyewitness_Screenshots/rdp --rdp --timeout 15 --results 50 --no-prompt
				fi
			fi 


##Check for RAWR output folder
#	if [ -d ./rawr_output ]; then
#		echo "RAWR folder found skipping running RAWR"
#	else
#		echo "RAWR Scan not found running scan"
#		python /opt/rawr/rawr.py ./Port_Scan/nmap_top25_$var-$yearmm.xml --noss -d ./rawr_output	
#	fi

##Check for TellMeWeb Output Whatweb
			if [ -n "$tellmeweb" ]; then

				if [ -d ./tellmeweb_output ]; then
					echo "TellMeWeb folder found skipping running TellMeWeb"
				else
					echo "TellMeWeb not found running scan"
					ruby /opt/tellmeweb/tell-me-web.rb ./Port_Scan/nmap_top25_$var-$yearmm.gnmap
				fi
			fi

##Check for Nikto Automated Scans; Meh It automatically checks for scanned host; This may be skipped
			if [ -n "$niktomeweb" ]; then
				if [ -d ./niktomeweb_output ]; then
					echo "NiktoMe Web folder found skipping running ZAPmeweb"
				else
					echo "NiktoMe not found running scan"
					ruby /opt/niktomeweb/nikto-me-web.rb ./Port_Scan/nmap_top25_$var-$yearmm.gnmap
				fi
			fi

##Check for ZAP Automated Scans; Meh It automatically checks for scanned host; This may be skipped
			if [ -n "$zapmeweb" ]; then
				if [ -d ./zapmeweb_output ]; then
					echo "ZAPMe Web folder found skipping running ZAPmeweb"
				else
					echo "ZAPmeweb not found running scan"
					ruby /opt/zapmeweb/zap-me-web.rb ./Port_Scan/nmap_top25_$var-$yearmm.gnmap
				fi
			fi

##Check for NBTScan Scans; It checks for the nbtscan information
			if [ -n "$nbt" ]; then
				if [ -d ./nbtscan ]; then
					echo "nbtscan folder found skipping running nbtscan"
				else
					echo "nbtscan not found running scan"
					mkdir ./nbtscan
					nbtscan $i > ./nbtscan/nbtscan.txt
				fi
			fi


##Check for ZAP Automated Scans; Meh It automatically checks for scanned host; This may be skipped
			if [ -d ./tellmeweb_output ]; then
				grep "^[0-9]\+" ./Port_Scan/nmap_top25_$var-$yearmm.nmap | grep "\ open\ " | sort | uniq -c | sort -rn | awk '{print "\""$1"\",\""$2"\",\""$3"\",\""$4"\",\""$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12" "$13"\""}' > test.csv

				cat ./tellmeweb_output/*.whatweb | grep -E 'Drupal|Joomla' > Further_Scan_Req
				mkdir enum4linux
	#			for host in $(cat ./SMB_List); do enum4linux -a $host >> ./enum4linux/enum.$host; done
			else
				echo "Enjoy"
			fi
	        	echo $(pwd)
			cd ../../
	        	echo $(pwd)

		else
			echo "No Nmap file created found"
		fi
	
	done;

else
	show_help	    
fi


